<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zewail的博客</title>
  
  <subtitle>我好像在哪见过你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zewail.me/"/>
  <updated>2017-09-20T15:18:10.000Z</updated>
  <id>http://www.zewail.me/</id>
  
  <author>
    <name>Zewail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac命令行用sublime、vscode、atom命令打开文件或目录</title>
    <link href="http://www.zewail.me/2017/08/11/Mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%A8sublime%E3%80%81vscode%E3%80%81atom%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.zewail.me/2017/08/11/Mac命令行用sublime、vscode、atom命令打开文件或目录/</id>
    <published>2017-08-10T17:04:21.000Z</published>
    <updated>2017-09-20T15:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通版：建立软连接"><a href="#普通版：建立软连接" class="headerlink" title="普通版：建立软连接"></a>普通版：建立软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/<span class="built_in">local</span>/bin/sublime</div><div class="line">ln -s /Applications/Atom.app/Contents/MacOS/Atom /usr/<span class="built_in">local</span>/bin/atom</div><div class="line">ln -s /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code /usr/<span class="built_in">local</span>/bin/vscode</div></pre></td></tr></table></figure><h3 id="zsh版：alias"><a href="#zsh版：alias" class="headerlink" title="zsh版：alias"></a>zsh版：alias</h3><p>编辑<code>.zsh</code>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.zshrc</div></pre></td></tr></table></figure></p><p>添加<code>alias</code>别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alias sublime=&apos;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&apos;</div><div class="line">alias atom=&apos;/Applications/Atom.app/Contents/MacOS/Atom&apos;</div><div class="line">alias vscode=&apos;/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code&apos;</div></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sublime example.js</div><div class="line">atom example.js</div><div class="line">vscode example.js</div></pre></td></tr></table></figure><p>打开当前目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sublime .</div><div class="line">atom .</div><div class="line">vscode .</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;普通版：建立软连接&quot;&gt;&lt;a href=&quot;#普通版：建立软连接&quot; class=&quot;headerlink&quot; title=&quot;普通版：建立软连接&quot;&gt;&lt;/a&gt;普通版：建立软连接&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="Mac" scheme="http://www.zewail.me/categories/Mac/"/>
    
    
      <category term="mac" scheme="http://www.zewail.me/tags/mac/"/>
    
      <category term="sublime" scheme="http://www.zewail.me/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画初识</title>
    <link href="http://www.zewail.me/2017/05/20/CSS3%E5%8A%A8%E7%94%BB%E5%88%9D%E8%AF%86/"/>
    <id>http://www.zewail.me/2017/05/20/CSS3动画初识/</id>
    <published>2017-05-20T15:10:45.000Z</published>
    <updated>2017-09-20T15:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><h3 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h3><p>CSS 动画由两个基本块构成</p><ol><li>Keyframes - 关键帧</li><li>Animation Properties - 动画属性</li></ol><h3 id="关键帧-Keyframes"><a href="#关键帧-Keyframes" class="headerlink" title="关键帧(Keyframes)"></a>关键帧(Keyframes)</h3><p>关键帧是CSS动画的基础，在每个阶段的动画时间轴定义动画的样子</p><p>每个<code>@keyframes</code>由以下部分组成</p><ol><li><code>动画的名称</code>：描述动画的名称，如<code>bounceIn</code></li><li><code>动画的阶段</code>：动画的每个阶段都用百分比表示，<code>0%</code>代表了动画的开始状态，<code>100%</code>代表了动画的结束状态，此外还可以添加多个中间状态</li><li><code>动画的属性</code>：在每个动画阶段定义的css属性</li></ol><p>一个简单的<code>@keyframes</code>例子，这个<code>@keyframes</code>有三个阶段，在第一阶段(<code>0%</code>)，元素为完全透明和10%的缩放大小，在第二阶段(<code>60%</code>)，元素消失完全不透明和120%的缩放大小，在最后阶段(<code>100%</code>), 元素返回默认大小<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> bounceIn &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.1);</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  60% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2);</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h3><p>动画属性用来做两件事</p><ul><li>分配<code>@keyframes</code>到需要发生动画的元素中</li><li>定义如何动画（有点拗口，但就是这么个意思。。。）</li></ul><p>添加动画属性到CSS选择器(或元素), 必须添加以下两个动画属性来使动画生效:</p><ul><li><code>animation-name</code>：动画的名称，由<code>@keyframes</code>定义</li><li><code>animation-duration</code>：动画的持续时间, 以秒为单位(如：5s)或毫秒(如：200ms)。</li></ul><p>举个栗子🌰：</p><p>使一个div发生上面定义的<code>bounceIn</code>动画：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">  <span class="attribute">animation-name</span>: bounceIn;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也可以用<code>animation</code>属性简写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: bounceIn <span class="number">2s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="动画属性简写"><a href="#动画属性简写" class="headerlink" title="动画属性简写"></a>动画属性简写</h3><p>每个动画属性都可以单独定义，但是为了使代码更清晰简洁，建议使用简写方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state];</div></pre></td></tr></table></figure><p>需要注意参数顺序，并且前两个参数为必须的</p><h3 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h3><p>许多基于Webkit的浏览器仍然使用-webkit-prefixed版本的动画,关键帧和转换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">2s</span>;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">  <span class="attribute">-webkit-animation-name</span>: bounceIn;</div><div class="line">  <span class="attribute">animation-name</span>: bounceIn;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> bounceIn &#123; <span class="comment">/* styles */</span> &#125;</div><div class="line">@<span class="keyword">keyframes</span> bounceIn &#123; <span class="comment">/* styles */</span> &#125;</div></pre></td></tr></table></figure><p>在他们采用标准版之前, 需要将-webkit前缀加入</p><h3 id="其他动画属性"><a href="#其他动画属性" class="headerlink" title="其他动画属性"></a>其他动画属性</h3><p>除了必需的<code>animation-name</code>和<code>animation-duration</code>动画属性, 还可以进一步自定义和创建复杂的动画:</p><ul><li><code>animation-timing-function</code></li><li><code>animation-delay</code></li><li><code>animation-iteration-count</code></li><li><code>animation-direction</code></li><li><code>animation-fill-mode</code></li><li><code>animation-play-state</code></li></ul><h4 id="Animation-timing-function"><a href="#Animation-timing-function" class="headerlink" title="Animation-timing-function"></a>Animation-timing-function</h4><p><code>animation-timing-function</code> 定义了动画的速度曲线, 默认值：<code>ease</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-timing-function: value;</div></pre></td></tr></table></figure><p>预设值：</p><ul><li><code>linear</code>: 动画从头到尾的速度是相同的</li><li><code>ease</code>: 默认。动画以低速开始，然后加快，在结束前变慢</li><li><code>ease-in</code>: 动画以低速开始</li><li><code>ease-out</code>: 动画以低速结束</li><li><code>ease-in-out</code>: 动画以低速开始和结束</li><li><code>cubic-bezier(n,n,n,n)</code>: 在 cubic-bezier 函数中自定义值。n可能是从 0 到 1 的数值</li></ul><h4 id="Animation-Delay"><a href="#Animation-Delay" class="headerlink" title="Animation-Delay"></a>Animation-Delay</h4><p><code>animation-delay</code>属性定义动画何时开始,  值为秒(如：5s)或毫秒(如：200ms)</p><p>注意： 允许负值，-2s 使动画马上开始，但跳过 2 秒进入动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">animation-delay</span>: <span class="number">5s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Animation-iteration-count"><a href="#Animation-iteration-count" class="headerlink" title="Animation-iteration-count"></a>Animation-iteration-count</h4><p><code>animation-iteration-count</code> 属性定义动画的播放次数</p><p>预设值：</p><ul><li>#：数值，表示循环次数，默认为1</li><li>infinite： 无限循环</li></ul><h4 id="Animation-direction"><a href="#Animation-direction" class="headerlink" title="Animation-direction"></a>Animation-direction</h4><p><code>animation-direction</code> 属性定义是否应该轮流反向播放动画, 如果 <code>animation-direction</code> 值是 <code>&quot;alternate&quot;</code>，则动画会在奇数次数（1、3、5 等等）正常播放，而在偶数次数（2、4、6 等等）向后播放</p><p>注意： 如果把动画设置为只播放一次，则该属性没有效果</p><p>预设值：</p><ul><li><code>normal</code>: 默认值。动画正常播放，在每个循环动画开始重置状态(0%)然后再到(100%)。</li><li><code>reverse</code>: 反向播放，在每个循环动画重置到最终状态(100%)然后再到(0%)。</li><li><code>alternate</code>:  动画轮流正向反向播放，动画从0%到100%然后再从100%到0%，循环往复播放。</li><li><code>alternate-reverse</code>: 动画轮流反向正向播放，动画从100%到0%然后再从0%到100%，循环往复播放。</li></ul><p>css语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-direction: alternate;</div></pre></td></tr></table></figure></p><h3 id="Animation-fill-mode"><a href="#Animation-fill-mode" class="headerlink" title="Animation-fill-mode"></a>Animation-fill-mode</h3><p><code>animation-fill-mode</code> 属性规定动画在播放之前或之后，其动画效果是否可见</p><ul><li><code>none</code>: 不改变默认行为</li><li><code>forwards</code>: 当动画完成后，保持最后一个属性值（在最后一个关键帧中定义)</li><li><code>backwards</code>: 在 <code>animation-delay</code> 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）</li><li><code>both</code>: 向前和向后填充模式都被应用</li></ul><h3 id="Animation-play-state"><a href="#Animation-play-state" class="headerlink" title="Animation-play-state"></a>Animation-play-state</h3><p><code>animation-play-state</code>属性规定动画正在运行还是暂停</p><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation-play-state: paused|running;</div></pre></td></tr></table></figure></p><p>预设值：</p><ul><li><code>paused</code>:</li><li><code>running</code>:</li></ul><p>举个栗子🌰：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;h3 id=&quot;基本构成&quot;&gt;&lt;a href=&quot;#基本构成&quot; class=&quot;headerlink&quot; title=&quot;基本构成&quot;&gt;&lt;/a&gt;基本构成&lt;/h3&gt;&lt;p&gt;CSS 动画由两个基本块构成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keyframes - 关键帧&lt;/li&gt;

      
    
    </summary>
    
      <category term="CSS" scheme="http://www.zewail.me/categories/CSS/"/>
    
    
      <category term="css" scheme="http://www.zewail.me/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原型与原型链的一些概念</title>
    <link href="http://www.zewail.me/2017/05/11/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.zewail.me/2017/05/11/原型与原型链的一些概念/</id>
    <published>2017-05-11T12:44:36.000Z</published>
    <updated>2017-09-20T15:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h2><p>先看栗子🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// object</span></div><div class="line"></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> fun()</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// object</span></div><div class="line"></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// object</span></div><div class="line"></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// function</span></div><div class="line"></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// function</span></div><div class="line"></div><div class="line"><span class="comment">/*------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'arg'</span>,<span class="string">'console.log(arg)'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test) <span class="comment">// function</span></div></pre></td></tr></table></figure><p>总结：所有通过<code>new Function()</code>创建的对象都是函数对象，其他的都是普通对象。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>先举个栗子🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"> <span class="keyword">this</span>.age = age;</div><div class="line"> <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name) &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'liming'</span>, <span class="number">28</span>, <span class="string">'Student'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'lily'</span>, <span class="number">23</span>, <span class="string">'Teacher'</span>);</div></pre></td></tr></table></figure><p>person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">//true</span></div></pre></td></tr></table></figure><blockquote><p>person1 和 person2 都是 构造函数 Person 的实例, 实例的构造函数属性（constructor）指向构造函数。</p></blockquote><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>在JavaScript 中，每当定义一个对象时候，对象中都会包含一些预定义的属性。其中函数对象的一个属性就是原型对象 prototype, 这个属性指向函数的原型对象。</p><blockquote><p>注：普通对象没有prototype,但有<strong>proto</strong>属性。</p></blockquote><p>原型对象其实就是普通对象（Function.prototype除外,它是函数对象，但它很特殊，他没有prototype属性（前面说道函数对象都有prototype属性））。</p><p>举个栗子🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(f1.prototype) <span class="comment">// Object &#123;constructor: function&#125; f1.prototype就是 f1的一个实例对象。就是在f1创建的时候,创建了一个它的实例对象并赋值给它的prototype</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1.prototype) <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype) <span class="comment">// function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype) <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype) <span class="comment">//undefined</span></div></pre></td></tr></table></figure><p>原型对象的主要作用是用于继承</p><p>举个栗子🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　　<span class="keyword">this</span>.name = name</div><div class="line">&#125;;</div><div class="line">person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> liming = <span class="keyword">new</span> person(<span class="string">'liming'</span>)</div><div class="line">liming.getName(); <span class="comment">//liming</span></div></pre></td></tr></table></figure><p>从这个例子可以看出，通过给person.prototype设置了一个函数对象的属性，那有person实例出来的普通对象就继承了这个属性。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做<strong>proto</strong>的内置属性，用于指向创建它的函数对象的原型对象prototype。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　　<span class="keyword">this</span>.name = name</div><div class="line">&#125;;</div><div class="line">person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> liming = <span class="keyword">new</span> person(<span class="string">'liming'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(liming.__proto__ === person.prototype) <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person.prototype.__proto__ === <span class="built_in">Object</span>.prototype) <span class="comment">//true, person.prototype对象也有__proto__属性，它指向创建它的函数对象（Object）的prototype</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">//null, Object.prototype对象也有__proto__属性，但它比较特殊，为null</span></div></pre></td></tr></table></figure><p>我们把这个有<strong>proto</strong>串起来的直到<code>Object.prototype.__proto__</code>为null的链叫做原型链</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;普通对象与函数对象&quot;&gt;&lt;a href=&quot;#普通对象与函数对象&quot; class=&quot;headerlink&quot; title=&quot;普通对象与函数对象&quot;&gt;&lt;/a&gt;普通对象与函数对象&lt;/h2&gt;&lt;p&gt;先看栗子🌰：&lt;/p&gt;
&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.zewail.me/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://www.zewail.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 优先级机制</title>
    <link href="http://www.zewail.me/2017/04/13/CSS-%E4%BC%98%E5%85%88%E7%BA%A7%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.zewail.me/2017/04/13/CSS-优先级机制/</id>
    <published>2017-04-13T14:47:43.000Z</published>
    <updated>2017-09-20T15:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS优先级机制"><a href="#CSS优先级机制" class="headerlink" title="CSS优先级机制"></a>CSS优先级机制</h1><h3 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h3><p>外部样式、内部样式和内联样式同时应用于同一个元素，就是使多重样式的情况<br>一般情况下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（外部样式）External style sheet &lt;（内部样式）Internal style sheet &lt;（内联样式）Inline style</div></pre></td></tr></table></figure></p><p>注意，有一个例外的情况，当外部样式放在内部样式的后面，则外部样式将覆盖内部样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      /* 内部样式 */</span></div><div class="line"><span class="undefined">      h1&#123; color:red; &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 外部样式 style.css --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      style.css内容：</span></div><div class="line"><span class="comment">      h1 &#123; color: green; &#125;</span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="CSS优先级法则"><a href="#CSS优先级法则" class="headerlink" title="CSS优先级法则"></a>CSS优先级法则</h3><h4 id="不同级别"><a href="#不同级别" class="headerlink" title="不同级别"></a>不同级别</h4><ol><li>!important的样式会覆盖页面内任何位置定义的样式</li><li>作为style属性写在元素内的样式</li><li>ID选择器</li><li>类选择器</li><li>元素选择器</li><li>通配符选择器</li><li>继承</li><li>浏览器默认属性</li></ol><p>总结： <code>!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配符选择器 &gt; 继承 &gt; 浏览器默认属性</code></p><h4 id="同一级别"><a href="#同一级别" class="headerlink" title="同一级别"></a>同一级别</h4><p>同一级别中后写的会覆盖先写的样式</p><p>优先级相同时，则采用就近原则，选择最后出现的样式</p><h3 id="高效CSS书写"><a href="#高效CSS书写" class="headerlink" title="高效CSS书写"></a>高效CSS书写</h3><ol><li>不要在ID选择器前使用元素名</li><li>如果没有相同的名字出现，不要在类选择器前使用元素名</li><li>尽量少使用层级关系， 使用类选择器代替层级关系</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS优先级机制&quot;&gt;&lt;a href=&quot;#CSS优先级机制&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级机制&quot;&gt;&lt;/a&gt;CSS优先级机制&lt;/h1&gt;&lt;h3 id=&quot;样式优先级&quot;&gt;&lt;a href=&quot;#样式优先级&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="CSS" scheme="http://www.zewail.me/categories/CSS/"/>
    
    
      <category term="css" scheme="http://www.zewail.me/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>LNMP安装PHP fileinfo扩展模块</title>
    <link href="http://www.zewail.me/2017/04/10/LNMP%E5%AE%89%E8%A3%85PHP-fileinfo%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.zewail.me/2017/04/10/LNMP安装PHP-fileinfo扩展模块/</id>
    <published>2017-04-10T14:31:47.000Z</published>
    <updated>2017-09-20T15:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步：找到lnmpa安装源位置"><a href="#第一步：找到lnmpa安装源位置" class="headerlink" title="第一步：找到lnmpa安装源位置"></a>第一步：找到lnmpa安装源位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找到自己安装的php版本</span></div><div class="line"><span class="built_in">cd</span> /lnmp1.3-full/src/php-5.6.9/ext/fileinfo/</div></pre></td></tr></table></figure><h4 id="第二步：查看phpize"><a href="#第二步：查看phpize" class="headerlink" title="第二步：查看phpize"></a>第二步：查看phpize</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</div></pre></td></tr></table></figure><p>返回类似下面的信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Configuring <span class="keyword">for</span>:</div><div class="line">PHP Api Version:         20131106</div><div class="line">Zend Module Api No:      20131226</div><div class="line">Zend Extension Api No:   220131226</div></pre></td></tr></table></figure></p><p>phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块，比如你想在原来编译好的php中加入memcached或者ImageMagick等扩展模块，可以使用phpize</p><h4 id="第三步：编译模块"><a href="#第三步：编译模块" class="headerlink" title="第三步：编译模块"></a>第三步：编译模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>返回类似下面信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Build complete.</div><div class="line">Don<span class="string">'t forget to run '</span>make <span class="built_in">test</span><span class="string">'.</span></div><div class="line"><span class="string">Installing shared extensions:     /usr/local/php/lib/php/extensions/nodebug-non-zts-20131226/</span></div></pre></td></tr></table></figure></p><p>表明安装成功了。</p><h4 id="第四步：修改php配置"><a href="#第四步：修改php配置" class="headerlink" title="第四步：修改php配置"></a>第四步：修改php配置</h4><p>/usr/local/php/etc/php.ini 添加扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=fileinfo.so</div></pre></td></tr></table></figure></p><p>如果安装的是nginx，则重启php-fpm进程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/php-fpm restart</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一步：找到lnmpa安装源位置&quot;&gt;&lt;a href=&quot;#第一步：找到lnmpa安装源位置&quot; class=&quot;headerlink&quot; title=&quot;第一步：找到lnmpa安装源位置&quot;&gt;&lt;/a&gt;第一步：找到lnmpa安装源位置&lt;/h4&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="PHP" scheme="http://www.zewail.me/categories/PHP/"/>
    
    
      <category term="php" scheme="http://www.zewail.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>解决screen断开后连不上的问题</title>
    <link href="http://www.zewail.me/2017/01/22/%E8%A7%A3%E5%86%B3screen%E6%96%AD%E5%BC%80%E5%90%8E%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.zewail.me/2017/01/22/解决screen断开后连不上的问题/</id>
    <published>2017-01-22T14:38:48.000Z</published>
    <updated>2017-09-20T15:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>当你挂起screen，下次想连上screen的时候，有时候会出现screen session的状态为Attached而怎么连也连不上的情况。</p><p>下面给出解决方法：</p><p>列出状态为Attached的session id：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen -ls</div></pre></td></tr></table></figure></p><p>先踢掉前一用户，再登陆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen -D  -r ＜session-id&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当你挂起screen，下次想连上screen的时候，有时候会出现screen session的状态为Attached而怎么连也连不上的情况。&lt;/p&gt;
&lt;p&gt;下面给出解决方法：&lt;/p&gt;
&lt;p&gt;列出状态为Attached的session id：&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.zewail.me/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://www.zewail.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS上搭建Shadowsocks服务端</title>
    <link href="http://www.zewail.me/2017/01/11/CentOS7%E4%B8%8A%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://www.zewail.me/2017/01/11/CentOS7上搭建Shadowsocks服务端/</id>
    <published>2017-01-11T11:44:33.000Z</published>
    <updated>2017-09-20T15:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用python版Shadowsocks安装 <a href="https://pypi.python.org/pypi/shadowsocks" target="_blank" rel="external">地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools</div><div class="line">easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建<code>/etc/shadowsocks.json</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></p><p>输入以下内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>:<span class="string">"服务器IP"</span>,</div><div class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</div><div class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>:<span class="string">"密码"</span>,</div><div class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</div><div class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>替换服务器IP和密码，也可以自定义端口</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>前台运行(Ctrl+C或者关闭终端服务会自动停止)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json</div></pre></td></tr></table></figure></p><p>后台运行(推荐，关闭终端后服务会继续运行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json -d start</div><div class="line">ssserver -c /etc/shadowsocks.json -d stop</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;使用python版Shadowsocks安装 &lt;a href=&quot;https://pypi.python.org/pypi/shadowsoc
      
    
    </summary>
    
    
      <category term="centos" scheme="http://www.zewail.me/tags/centos/"/>
    
      <category term="shadowsocks" scheme="http://www.zewail.me/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Centos7关闭防火墙并使用iptables</title>
    <link href="http://www.zewail.me/2017/01/10/Centos7%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%B9%B6%E4%BD%BF%E7%94%A8iptables/"/>
    <id>http://www.zewail.me/2017/01/10/Centos7关闭防火墙并使用iptables/</id>
    <published>2017-01-10T14:24:13.000Z</published>
    <updated>2017-09-20T15:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>关闭firewall<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld.service</div></pre></td></tr></table></figure></p><p>禁止firewall开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">disable</span> firewalld.service</div></pre></td></tr></table></figure></p><h3 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install iptables-services</div></pre></td></tr></table></figure><h3 id="修改iptables配置"><a href="#修改iptables配置" class="headerlink" title="修改iptables配置"></a>修改iptables配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>看情况增加规则，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</div></pre></td></tr></table></figure></p><h3 id="重启iptables并配置iptables开机启动"><a href="#重启iptables并配置iptables开机启动" class="headerlink" title="重启iptables并配置iptables开机启动"></a>重启iptables并配置iptables开机启动</h3><p>重启iptables</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart iptables.service</div></pre></td></tr></table></figure><p>设置iptables开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> iptables.service</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class=&quot;headerlink&quot; title=&quot;关闭防火墙&quot;&gt;&lt;/a&gt;关闭防火墙&lt;/h3&gt;&lt;p&gt;关闭firewall&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.zewail.me/categories/Linux/"/>
    
      <category term="CentOS" scheme="http://www.zewail.me/categories/Linux/CentOS/"/>
    
    
      <category term="centos" scheme="http://www.zewail.me/tags/centos/"/>
    
      <category term="linux" scheme="http://www.zewail.me/tags/linux/"/>
    
  </entry>
  
</feed>
